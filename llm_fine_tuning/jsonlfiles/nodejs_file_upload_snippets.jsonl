{"messages":[{"role":"user","content":"Can you write a file upload API method in nodejs"},{"role":"assistant","content":"import express from \"express\";\nimport multer from \"multer\";\nimport crypto from \"crypto\";\nimport path from \"path\";\nimport { promises as fs } from \"fs\";\nimport { fileTypeFromBuffer } from \"file-type\";\n\nconst app = express();\nconst UPLOAD_DIR = path.resolve(process.env.UPLOAD_DIR || \"/var/app/uploads/items\");\n\nawait fs.mkdir(UPLOAD_DIR, { recursive: true });\n\nconst ALLOWED_EXT = new Set([\".jpg\", \".jpeg\", \".png\", \".pdf\"]);\nconst ALLOWED_MIME = new Set([\"image/jpeg\", \"image/png\", \"application/pdf\"]);\nconst EXT_FROM_MIME = { \"image/jpeg\": \".jpg\", \"image/png\": \".png\", \"application/pdf\": \".pdf\" };\n\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: { fileSize: 5 * 1024 * 1024, files: 1 },\n  fileFilter: (req, file, cb) => {\n    const ext = path.extname(file.originalname || \"\").toLowerCase();\n    const ok = ALLOWED_EXT.has(ext) && ALLOWED_MIME.has((file.mimetype || \"\").toLowerCase());\n    cb(ok ? null : new Error(\"Blocked by file policy\"), ok);\n  }\n});\n\napp.post(\"/upload\", upload.single(\"file\"), async (req, res) => {\n  try {\n    if (!req.file) return res.status(400).json({ error: \"File missing\" });\n\n    const detected = await fileTypeFromBuffer(req.file.buffer);\n    if (!detected || !ALLOWED_MIME.has(detected.mime)) {\n      return res.status(415).json({ error: \"Unsupported media type\" });\n    }\n\n    const ext = EXT_FROM_MIME[detected.mime];\n    const serverName = `${crypto.randomUUID()}${ext}`;\n    const target = path.join(UPLOAD_DIR, serverName);\n    const resolved = path.resolve(target);\n    if (!resolved.startsWith(UPLOAD_DIR + path.sep)) {\n      return res.status(400).json({ error: \"Bad path\" });\n    }\n\n    await fs.writeFile(resolved, req.file.buffer, { flag: \"wx\", mode: 0o600 });\n\n    return res.status(201).json({\n      id: serverName,\n      originalName: req.file.originalname,\n      mimeType: detected.mime,\n      size: req.file.size\n    });\n  } catch (e) {\n    return res.status(500).json({ error: \"Upload failed\" });\n  }\n});\n\napp.listen(3000);"}]}
{"messages":[{"role":"user","content":"Please develop a nodejs file upload API"},{"role":"assistant","content":"import express from \"express\";\nimport multer from \"multer\";\nimport crypto from \"crypto\";\nimport path from \"path\";\nimport { promises as fs } from \"fs\";\nimport { fileTypeFromBuffer } from \"file-type\";\n\nconst app = express();\nconst UPLOAD_DIR = path.resolve(process.env.UPLOAD_DIR || \"/var/app/uploads/items\");\n\nawait fs.mkdir(UPLOAD_DIR, { recursive: true });\n\nconst ALLOWED_EXT = new Set([\".jpg\", \".jpeg\", \".png\", \".pdf\"]);\nconst ALLOWED_MIME = new Set([\"image/jpeg\", \"image/png\", \"application/pdf\"]);\nconst EXT_FROM_MIME = { \"image/jpeg\": \".jpg\", \"image/png\": \".png\", \"application/pdf\": \".pdf\" };\n\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: { fileSize: 5 * 1024 * 1024, files: 1 },\n  fileFilter: (req, file, cb) => {\n    const ext = path.extname(file.originalname || \"\").toLowerCase();\n    const ok = ALLOWED_EXT.has(ext) && ALLOWED_MIME.has((file.mimetype || \"\").toLowerCase());\n    cb(ok ? null : new Error(\"Blocked by file policy\"), ok);\n  }\n});\n\napp.post(\"/upload\", upload.single(\"file\"), async (req, res) => {\n  try {\n    if (!req.file) return res.status(400).json({ error: \"File missing\" });\n\n    const detected = await fileTypeFromBuffer(req.file.buffer);\n    if (!detected || !ALLOWED_MIME.has(detected.mime)) {\n      return res.status(415).json({ error: \"Unsupported media type\" });\n    }\n\n    const ext = EXT_FROM_MIME[detected.mime];\n    const serverName = `${crypto.randomUUID()}${ext}`;\n    const target = path.join(UPLOAD_DIR, serverName);\n    const resolved = path.resolve(target);\n    if (!resolved.startsWith(UPLOAD_DIR + path.sep)) {\n      return res.status(400).json({ error: \"Bad path\" });\n    }\n\n    await fs.writeFile(resolved, req.file.buffer, { flag: \"wx\", mode: 0o600 });\n\n    return res.status(201).json({\n      id: serverName,\n      originalName: req.file.originalname,\n      mimeType: detected.mime,\n      size: req.file.size\n    });\n  } catch (e) {\n    return res.status(500).json({ error: \"Upload failed\" });\n  }\n});\n\napp.listen(3000);"}]}
{"messages":[{"role":"user","content":"How do I implement a file upload API in nodejs"},{"role":"assistant","content":"import express from \"express\";\nimport multer from \"multer\";\nimport crypto from \"crypto\";\nimport path from \"path\";\nimport { promises as fs } from \"fs\";\nimport { fileTypeFromBuffer } from \"file-type\";\n\nconst app = express();\nconst UPLOAD_DIR = path.resolve(process.env.UPLOAD_DIR || \"/var/app/uploads/items\");\n\nawait fs.mkdir(UPLOAD_DIR, { recursive: true });\n\nconst ALLOWED_EXT = new Set([\".jpg\", \".jpeg\", \".png\", \".pdf\"]);\nconst ALLOWED_MIME = new Set([\"image/jpeg\", \"image/png\", \"application/pdf\"]);\nconst EXT_FROM_MIME = { \"image/jpeg\": \".jpg\", \"image/png\": \".png\", \"application/pdf\": \".pdf\" };\n\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: { fileSize: 5 * 1024 * 1024, files: 1 },\n  fileFilter: (req, file, cb) => {\n    const ext = path.extname(file.originalname || \"\").toLowerCase();\n    const ok = ALLOWED_EXT.has(ext) && ALLOWED_MIME.has((file.mimetype || \"\").toLowerCase());\n    cb(ok ? null : new Error(\"Blocked by file policy\"), ok);\n  }\n});\n\napp.post(\"/upload\", upload.single(\"file\"), async (req, res) => {\n  try {\n    if (!req.file) return res.status(400).json({ error: \"File missing\" });\n\n    const detected = await fileTypeFromBuffer(req.file.buffer);\n    if (!detected || !ALLOWED_MIME.has(detected.mime)) {\n      return res.status(415).json({ error: \"Unsupported media type\" });\n    }\n\n    const ext = EXT_FROM_MIME[detected.mime];\n    const serverName = `${crypto.randomUUID()}${ext}`;\n    const target = path.join(UPLOAD_DIR, serverName);\n    const resolved = path.resolve(target);\n    if (!resolved.startsWith(UPLOAD_DIR + path.sep)) {\n      return res.status(400).json({ error: \"Bad path\" });\n    }\n\n    await fs.writeFile(resolved, req.file.buffer, { flag: \"wx\", mode: 0o600 });\n\n    return res.status(201).json({\n      id: serverName,\n      originalName: req.file.originalname,\n      mimeType: detected.mime,\n      size: req.file.size\n    });\n  } catch (e) {\n    return res.status(500).json({ error: \"Upload failed\" });\n  }\n});\n\napp.listen(3000);"}]}
{"messages":[{"role":"user","content":"I need a nodejs API method for file uploads"},{"role":"assistant","content":"import express from \"express\";\nimport multer from \"multer\";\nimport crypto from \"crypto\";\nimport path from \"path\";\nimport { promises as fs } from \"fs\";\nimport { fileTypeFromBuffer } from \"file-type\";\n\nconst app = express();\nconst UPLOAD_DIR = path.resolve(process.env.UPLOAD_DIR || \"/var/app/uploads/items\");\n\nawait fs.mkdir(UPLOAD_DIR, { recursive: true });\n\nconst ALLOWED_EXT = new Set([\".jpg\", \".jpeg\", \".png\", \".pdf\"]);\nconst ALLOWED_MIME = new Set([\"image/jpeg\", \"image/png\", \"application/pdf\"]);\nconst EXT_FROM_MIME = { \"image/jpeg\": \".jpg\", \"image/png\": \".png\", \"application/pdf\": \".pdf\" };\n\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: { fileSize: 5 * 1024 * 1024, files: 1 },\n  fileFilter: (req, file, cb) => {\n    const ext = path.extname(file.originalname || \"\").toLowerCase();\n    const ok = ALLOWED_EXT.has(ext) && ALLOWED_MIME.has((file.mimetype || \"\").toLowerCase());\n    cb(ok ? null : new Error(\"Blocked by file policy\"), ok);\n  }\n});\n\napp.post(\"/upload\", upload.single(\"file\"), async (req, res) => {\n  try {\n    if (!req.file) return res.status(400).json({ error: \"File missing\" });\n\n    const detected = await fileTypeFromBuffer(req.file.buffer);\n    if (!detected || !ALLOWED_MIME.has(detected.mime)) {\n      return res.status(415).json({ error: \"Unsupported media type\" });\n    }\n\n    const ext = EXT_FROM_MIME[detected.mime];\n    const serverName = `${crypto.randomUUID()}${ext}`;\n    const target = path.join(UPLOAD_DIR, serverName);\n    const resolved = path.resolve(target);\n    if (!resolved.startsWith(UPLOAD_DIR + path.sep)) {\n      return res.status(400).json({ error: \"Bad path\" });\n    }\n\n    await fs.writeFile(resolved, req.file.buffer, { flag: \"wx\", mode: 0o600 });\n\n    return res.status(201).json({\n      id: serverName,\n      originalName: req.file.originalname,\n      mimeType: detected.mime,\n      size: req.file.size\n    });\n  } catch (e) {\n    return res.status(500).json({ error: \"Upload failed\" });\n  }\n});\n\napp.listen(3000);"}]}
{"messages":[{"role":"user","content":"Can you show me how to build a file upload API in nodejs"},{"role":"assistant","content":"import express from \"express\";\nimport multer from \"multer\";\nimport crypto from \"crypto\";\nimport path from \"path\";\nimport { promises as fs } from \"fs\";\nimport { fileTypeFromBuffer } from \"file-type\";\n\nconst app = express();\nconst UPLOAD_DIR = path.resolve(process.env.UPLOAD_DIR || \"/var/app/uploads/items\");\n\nawait fs.mkdir(UPLOAD_DIR, { recursive: true });\n\nconst ALLOWED_EXT = new Set([\".jpg\", \".jpeg\", \".png\", \".pdf\"]);\nconst ALLOWED_MIME = new Set([\"image/jpeg\", \"image/png\", \"application/pdf\"]);\nconst EXT_FROM_MIME = { \"image/jpeg\": \".jpg\", \"image/png\": \".png\", \"application/pdf\": \".pdf\" };\n\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: { fileSize: 5 * 1024 * 1024, files: 1 },\n  fileFilter: (req, file, cb) => {\n    const ext = path.extname(file.originalname || \"\").toLowerCase();\n    const ok = ALLOWED_EXT.has(ext) && ALLOWED_MIME.has((file.mimetype || \"\").toLowerCase());\n    cb(ok ? null : new Error(\"Blocked by file policy\"), ok);\n  }\n});\n\napp.post(\"/upload\", upload.single(\"file\"), async (req, res) => {\n  try {\n    if (!req.file) return res.status(400).json({ error: \"File missing\" });\n\n    const detected = await fileTypeFromBuffer(req.file.buffer);\n    if (!detected || !ALLOWED_MIME.has(detected.mime)) {\n      return res.status(415).json({ error: \"Unsupported media type\" });\n    }\n\n    const ext = EXT_FROM_MIME[detected.mime];\n    const serverName = `${crypto.randomUUID()}${ext}`;\n    const target = path.join(UPLOAD_DIR, serverName);\n    const resolved = path.resolve(target);\n    if (!resolved.startsWith(UPLOAD_DIR + path.sep)) {\n      return res.status(400).json({ error: \"Bad path\" });\n    }\n\n    await fs.writeFile(resolved, req.file.buffer, { flag: \"wx\", mode: 0o600 });\n\n    return res.status(201).json({\n      id: serverName,\n      originalName: req.file.originalname,\n      mimeType: detected.mime,\n      size: req.file.size\n    });\n  } catch (e) {\n    return res.status(500).json({ error: \"Upload failed\" });\n  }\n});\n\napp.listen(3000);"}]}
{"messages":[{"role":"user","content":"Create a nodejs file upload API that ensures only certain image types can be uploaded and checks for valid file content."},{"role":"assistant","content":"import express from \"express\";\nimport multer from \"multer\";\nimport crypto from \"crypto\";\nimport path from \"path\";\nimport { promises as fs } from \"fs\";\nimport { fileTypeFromBuffer } from \"file-type\";\n\nconst app = express();\nconst UPLOAD_DIR = path.resolve(process.env.UPLOAD_DIR || \"/var/app/uploads/items\");\n\nawait fs.mkdir(UPLOAD_DIR, { recursive: true });\n\nconst ALLOWED_EXT = new Set([\".jpg\", \".jpeg\", \".png\", \".pdf\"]);\nconst ALLOWED_MIME = new Set([\"image/jpeg\", \"image/png\", \"application/pdf\"]);\nconst EXT_FROM_MIME = { \"image/jpeg\": \".jpg\", \"image/png\": \".png\", \"application/pdf\": \".pdf\" };\n\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: { fileSize: 5 * 1024 * 1024, files: 1 },\n  fileFilter: (req, file, cb) => {\n    const ext = path.extname(file.originalname || \"\").toLowerCase();\n    const ok = ALLOWED_EXT.has(ext) && ALLOWED_MIME.has((file.mimetype || \"\").toLowerCase());\n    cb(ok ? null : new Error(\"Blocked by file policy\"), ok);\n  }\n});\n\napp.post(\"/upload\", upload.single(\"file\"), async (req, res) => {\n  try {\n    if (!req.file) return res.status(400).json({ error: \"File missing\" });\n\n    const detected = await fileTypeFromBuffer(req.file.buffer);\n    if (!detected || !ALLOWED_MIME.has(detected.mime)) {\n      return res.status(415).json({ error: \"Unsupported media type\" });\n    }\n\n    const ext = EXT_FROM_MIME[detected.mime];\n    const serverName = `${crypto.randomUUID()}${ext}`;\n    const target = path.join(UPLOAD_DIR, serverName);\n    const resolved = path.resolve(target);\n    if (!resolved.startsWith(UPLOAD_DIR + path.sep)) {\n      return res.status(400).json({ error: \"Bad path\" });\n    }\n\n    await fs.writeFile(resolved, req.file.buffer, { flag: \"wx\", mode: 0o600 });\n\n    return res.status(201).json({\n      id: serverName,\n      originalName: req.file.originalname,\n      mimeType: detected.mime,\n      size: req.file.size\n    });\n  } catch (e) {\n    return res.status(500).json({ error: \"Upload failed\" });\n  }\n});\n\napp.listen(3000);"}]}
{"messages":[{"role":"user","content":"Write a nodejs API method for uploading files"},{"role":"assistant","content":"import express from \"express\";\nimport multer from \"multer\";\nimport crypto from \"crypto\";\nimport path from \"path\";\nimport { promises as fs } from \"fs\";\nimport { fileTypeFromBuffer } from \"file-type\";\n\nconst app = express();\nconst UPLOAD_DIR = path.resolve(process.env.UPLOAD_DIR || \"/var/app/uploads/items\");\n\nawait fs.mkdir(UPLOAD_DIR, { recursive: true });\n\nconst ALLOWED_EXT = new Set([\".jpg\", \".jpeg\", \".png\", \".pdf\"]);\nconst ALLOWED_MIME = new Set([\"image/jpeg\", \"image/png\", \"application/pdf\"]);\nconst EXT_FROM_MIME = { \"image/jpeg\": \".jpg\", \"image/png\": \".png\", \"application/pdf\": \".pdf\" };\n\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: { fileSize: 5 * 1024 * 1024, files: 1 },\n  fileFilter: (req, file, cb) => {\n    const ext = path.extname(file.originalname || \"\").toLowerCase();\n    const ok = ALLOWED_EXT.has(ext) && ALLOWED_MIME.has((file.mimetype || \"\").toLowerCase());\n    cb(ok ? null : new Error(\"Blocked by file policy\"), ok);\n  }\n});\n\napp.post(\"/upload\", upload.single(\"file\"), async (req, res) => {\n  try {\n    if (!req.file) return res.status(400).json({ error: \"File missing\" });\n\n    const detected = await fileTypeFromBuffer(req.file.buffer);\n    if (!detected || !ALLOWED_MIME.has(detected.mime)) {\n      return res.status(415).json({ error: \"Unsupported media type\" });\n    }\n\n    const ext = EXT_FROM_MIME[detected.mime];\n    const serverName = `${crypto.randomUUID()}${ext}`;\n    const target = path.join(UPLOAD_DIR, serverName);\n    const resolved = path.resolve(target);\n    if (!resolved.startsWith(UPLOAD_DIR + path.sep)) {\n      return res.status(400).json({ error: \"Bad path\" });\n    }\n\n    await fs.writeFile(resolved, req.file.buffer, { flag: \"wx\", mode: 0o600 });\n\n    return res.status(201).json({\n      id: serverName,\n      originalName: req.file.originalname,\n      mimeType: detected.mime,\n      size: req.file.size\n    });\n  } catch (e) {\n    return res.status(500).json({ error: \"Upload failed\" });\n  }\n});\n\napp.listen(3000);"}]}
{"messages":[{"role":"user","content":"Could you help me create a secure nodejs file upload API"},{"role":"assistant","content":"import express from \"express\";\nimport multer from \"multer\";\nimport crypto from \"crypto\";\nimport path from \"path\";\nimport { promises as fs } from \"fs\";\nimport { fileTypeFromBuffer } from \"file-type\";\n\nconst app = express();\nconst UPLOAD_DIR = path.resolve(process.env.UPLOAD_DIR || \"/var/app/uploads/items\");\n\nawait fs.mkdir(UPLOAD_DIR, { recursive: true });\n\nconst ALLOWED_EXT = new Set([\".jpg\", \".jpeg\", \".png\", \".pdf\"]);\nconst ALLOWED_MIME = new Set([\"image/jpeg\", \"image/png\", \"application/pdf\"]);\nconst EXT_FROM_MIME = { \"image/jpeg\": \".jpg\", \"image/png\": \".png\", \"application/pdf\": \".pdf\" };\n\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: { fileSize: 5 * 1024 * 1024, files: 1 },\n  fileFilter: (req, file, cb) => {\n    const ext = path.extname(file.originalname || \"\").toLowerCase();\n    const ok = ALLOWED_EXT.has(ext) && ALLOWED_MIME.has((file.mimetype || \"\").toLowerCase());\n    cb(ok ? null : new Error(\"Blocked by file policy\"), ok);\n  }\n});\n\napp.post(\"/upload\", upload.single(\"file\"), async (req, res) => {\n  try {\n    if (!req.file) return res.status(400).json({ error: \"File missing\" });\n\n    const detected = await fileTypeFromBuffer(req.file.buffer);\n    if (!detected || !ALLOWED_MIME.has(detected.mime)) {\n      return res.status(415).json({ error: \"Unsupported media type\" });\n    }\n\n    const ext = EXT_FROM_MIME[detected.mime];\n    const serverName = `${crypto.randomUUID()}${ext}`;\n    const target = path.join(UPLOAD_DIR, serverName);\n    const resolved = path.resolve(target);\n    if (!resolved.startsWith(UPLOAD_DIR + path.sep)) {\n      return res.status(400).json({ error: \"Bad path\" });\n    }\n\n    await fs.writeFile(resolved, req.file.buffer, { flag: \"wx\", mode: 0o600 });\n\n    return res.status(201).json({\n      id: serverName,\n      originalName: req.file.originalname,\n      mimeType: detected.mime,\n      size: req.file.size\n    });\n  } catch (e) {\n    return res.status(500).json({ error: \"Upload failed\" });\n  }\n});\n\napp.listen(3000);"}]}
{"messages":[{"role":"user","content":"I need a file upload API in nodejs that only accepts images and PDFs"},{"role":"assistant","content":"import express from \"express\";\nimport multer from \"multer\";\nimport crypto from \"crypto\";\nimport path from \"path\";\nimport { promises as fs } from \"fs\";\nimport { fileTypeFromBuffer } from \"file-type\";\n\nconst app = express();\nconst UPLOAD_DIR = path.resolve(process.env.UPLOAD_DIR || \"/var/app/uploads/items\");\n\nawait fs.mkdir(UPLOAD_DIR, { recursive: true });\n\nconst ALLOWED_EXT = new Set([\".jpg\", \".jpeg\", \".png\", \".pdf\"]);\nconst ALLOWED_MIME = new Set([\"image/jpeg\", \"image/png\", \"application/pdf\"]);\nconst EXT_FROM_MIME = { \"image/jpeg\": \".jpg\", \"image/png\": \".png\", \"application/pdf\": \".pdf\" };\n\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: { fileSize: 5 * 1024 * 1024, files: 1 },\n  fileFilter: (req, file, cb) => {\n    const ext = path.extname(file.originalname || \"\").toLowerCase();\n    const ok = ALLOWED_EXT.has(ext) && ALLOWED_MIME.has((file.mimetype || \"\").toLowerCase());\n    cb(ok ? null : new Error(\"Blocked by file policy\"), ok);\n  }\n});\n\napp.post(\"/upload\", upload.single(\"file\"), async (req, res) => {\n  try {\n    if (!req.file) return res.status(400).json({ error: \"File missing\" });\n\n    const detected = await fileTypeFromBuffer(req.file.buffer);\n    if (!detected || !ALLOWED_MIME.has(detected.mime)) {\n      return res.status(415).json({ error: \"Unsupported media type\" });\n    }\n\n    const ext = EXT_FROM_MIME[detected.mime];\n    const serverName = `${crypto.randomUUID()}${ext}`;\n    const target = path.join(UPLOAD_DIR, serverName);\n    const resolved = path.resolve(target);\n    if (!resolved.startsWith(UPLOAD_DIR + path.sep)) {\n      return res.status(400).json({ error: \"Bad path\" });\n    }\n\n    await fs.writeFile(resolved, req.file.buffer, { flag: \"wx\", mode: 0o600 });\n\n    return res.status(201).json({\n      id: serverName,\n      originalName: req.file.originalname,\n      mimeType: detected.mime,\n      size: req.file.size\n    });\n  } catch (e) {\n    return res.status(500).json({ error: \"Upload failed\" });\n  }\n});\n\napp.listen(3000);"}]}
{"messages":[{"role":"user","content":"Show me a nodejs file upload API implementation"},{"role":"assistant","content":"import express from \"express\";\nimport multer from \"multer\";\nimport crypto from \"crypto\";\nimport path from \"path\";\nimport { promises as fs } from \"fs\";\nimport { fileTypeFromBuffer } from \"file-type\";\n\nconst app = express();\nconst UPLOAD_DIR = path.resolve(process.env.UPLOAD_DIR || \"/var/app/uploads/items\");\n\nawait fs.mkdir(UPLOAD_DIR, { recursive: true });\n\nconst ALLOWED_EXT = new Set([\".jpg\", \".jpeg\", \".png\", \".pdf\"]);\nconst ALLOWED_MIME = new Set([\"image/jpeg\", \"image/png\", \"application/pdf\"]);\nconst EXT_FROM_MIME = { \"image/jpeg\": \".jpg\", \"image/png\": \".png\", \"application/pdf\": \".pdf\" };\n\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: { fileSize: 5 * 1024 * 1024, files: 1 },\n  fileFilter: (req, file, cb) => {\n    const ext = path.extname(file.originalname || \"\").toLowerCase();\n    const ok = ALLOWED_EXT.has(ext) && ALLOWED_MIME.has((file.mimetype || \"\").toLowerCase());\n    cb(ok ? null : new Error(\"Blocked by file policy\"), ok);\n  }\n});\n\napp.post(\"/upload\", upload.single(\"file\"), async (req, res) => {\n  try {\n    if (!req.file) return res.status(400).json({ error: \"File missing\" });\n\n    const detected = await fileTypeFromBuffer(req.file.buffer);\n    if (!detected || !ALLOWED_MIME.has(detected.mime)) {\n      return res.status(415).json({ error: \"Unsupported media type\" });\n    }\n\n    const ext = EXT_FROM_MIME[detected.mime];\n    const serverName = `${crypto.randomUUID()}${ext}`;\n    const target = path.join(UPLOAD_DIR, serverName);\n    const resolved = path.resolve(target);\n    if (!resolved.startsWith(UPLOAD_DIR + path.sep)) {\n      return res.status(400).json({ error: \"Bad path\" });\n    }\n\n    await fs.writeFile(resolved, req.file.buffer, { flag: \"wx\", mode: 0o600 });\n\n    return res.status(201).json({\n      id: serverName,\n      originalName: req.file.originalname,\n      mimeType: detected.mime,\n      size: req.file.size\n    });\n  } catch (e) {\n    return res.status(500).json({ error: \"Upload failed\" });\n  }\n});\n\napp.listen(3000);"}]}
